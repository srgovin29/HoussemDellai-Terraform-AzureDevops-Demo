# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  subscription: 'srgovin29_subscription(7e9464cb-6d69-4edc-8ee0-613d543b56d0)'
  resourceGroup: terraform-resource-group
  storageAccount: terraformtfstatesrgovin
  container: tfstate
  tfstateFile: terraform.tfstate
  anyTfChanges: false

stages:
- stage: HelloWorld
  displayName: Hello, world!
  jobs:
  - job: HelloWorld
    steps:
    - script: 
        echo Hello, world!
      displayName: 'Run a one-line script'

- stage: echoDetail
  jobs:
  - job: RunMultiLineScript
    steps:
    - script: |
        echo Add other tasks to build, test, and deploy your project.
        echo See https://aka.ms/yaml
      displayName: 'Run a multi-line script'

- stage: TerraformExecution
  displayName: Deploy using Terraform
  jobs:
  - job: TerraformExecution
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: $(subscription)
        backendAzureRmResourceGroupName: $(resourceGroup)
        backendAzureRmStorageAccountName: $(terraformtfstatesrgovin)
        backendAzureRmContainerName: $(tfstate)
        backendAzureRmKey: $(tfstateFile)
      
    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'plan'
        commandOptions: '-out=tfplan'
        environmentServiceNameAzureRM: $(subscription)

    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: '-input=false tfplan'
        environmentServiceNameAzureRM: $(subscription)