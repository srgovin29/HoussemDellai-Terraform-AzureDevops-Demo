# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  subscription: 'srgovin29_subscription(7e9464cb-6d69-4edc-8ee0-613d543b56d0)'
  resourceGroup: terraform-resource-group
  storageAccount: terraformtfstatesrgovin
  container: tfstate
  tfstateFile: terraform.tfstate
  anyTfChanges: false

stages:
- stage: Install
  displayName: Terraform Installation
  jobs:
  - job: TerraformInstall
    displayName: Terraform Installation
    steps:
    - task: TerraformInstaller@0
      displayName: install Terraform v0.12.28
      inputs:
        terraformVersion: 'latest'

- stage: Init
  displayName: Terraform Init
  jobs:
  - job: TerraformInit
    displayName: Terraform Init
    steps:
    - task: TerraformTaskV4@4
      displayName: terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
        backendServiceArm: '$(subscription)'
        backendAzureRmResourceGroupName: '$(resourceGroup)'
        backendAzureRmStorageAccountName: '$(storageAccount)'
        backendAzureRmContainerName: '$(tfstate)'
        backendAzureRmKey: '$(tfstateFile)'
        
  - job: TerraformPlan
    displayName: Terraform Plan
    steps:
    - task: TerraformTaskV4@4
      displayName: Terraform plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
        environmentServiceNameAzureRM: '$(subscription)'
        commandOptions: '-out=tfplan'
        backendServiceArm: '$(subscription)'