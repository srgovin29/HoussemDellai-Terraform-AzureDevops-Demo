# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  subscription: 'srgovin29_subscription(7e9464cb-6d69-4edc-8ee0-613d543b56d0)'
  resourceGroup: resourcegroup-tfstate
  storageAccount: terraformtfstatesrgovin
  container: tfstate
  tfstateFile: terraform.tfstate
  anyTfChanges: false

steps:

- task: TerraformInstaller@0
  displayName: install Terraform v0.12.28
  inputs:
    terraformVersion: '0.12.28'

- task: TerraformTaskV4@4
  displayName: terraform init
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
    backendServiceArm: '$(subscription)'
    backendAzureRmResourceGroupName: '$(resourceGroup)'
    backendAzureRmStorageAccountName: '$(storageAccount)'
    backendAzureRmContainerName: '$(tfstate)'
    backendAzureRmKey: '$(tfstateFile)'

- task: TerraformTaskV4@4
  displayName: Terraform plan
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
    environmentServiceNameAzureRM: '$(subscription)'
    commandOptions: '-out=tfplan'

- task: TerraformTaskV1@0
  displayName: terraform apply tfplan
  condition: eq(variables.anyTfChanges,Â true)
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
    commandOptions: 'tfplan; tfplan -auto-approve'
    environmentServiceNameAzureRM: '$(subscription)'